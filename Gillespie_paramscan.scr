#!/bin/bash

# Run a parameter sweep with Gillespie.

# Usage: ./Gillespie_paramscan <PROJECT_NAME>

# Model file should contain parameter equated to '[PARAM1]',...,'[PARAMi]'. 
# This file replaces every occurance of these with the parameter value 
# spedified in the files PARAM1,...,PARAMi, and runs the simulation on the
# model file.

#Get project name of model file.
#PROJECT_NAME=`echo $INPUT_FILE | sed 's/\([0-9A-Za-z_-]*\).*/\1/'`
PROJECT_NAME=$1

#Remove older files.
rm -f *.0.*
rm -f *~
rm -f PARAM*~
rm -f *.dat

rm -fr $PROJECT_NAME"_"*
rm -f avr.*
rm -f diff.*
rm -f tot.*
rm -f *.tot
rm -f NN.*
rm -f NA.*
rm -f NB.*
rm -f NAB.*

# Define files for parameter parsing.
MODEL_FILE=$PROJECT_NAME".mdl"
PARAM_FILE=$PROJECT_NAME".par"
TEMPL_FILE=$PROJECT_NAME".mtp"
OUTPUT_FILE=`pwd`"/"$PROJECT_NAME".dat"

if [ -a $PARAM_FILE ] 
then
  Gillespie_parasub $PARAM_FILE $TEMPL_FILE $MODEL_FILE
else
  cp $TEMPL_FILE $MODEL_FILE
fi

#Find the number of PARAM files.
PARAM_NBR=`ls -1 PARAM* | wc -l`
paramfiles=`ls PARAM*`

#Find number of iterations. Assuming all files have the same length as the first.
ITERATION_NBR=`cat PARAM1 | wc -l`

echo $ITERATION_NBR "simulations on roll with" $PARAM_NBR "parameters, writing data to:" $PROJECT_NAME".dat"

for i in `seq 1 $ITERATION_NBR`
do

  #start counting at 100, easier dir sequence.
  j=`expr $i + 100`

  RUN_DIR=$PROJECT_NAME"_"$j
  RUN_MDL=$PROJECT_NAME"_"$j".mdl"
  RUN_LOG=$PROJECT_NAME"_"$j".log"

  mkdir $RUN_DIR
  cp $MODEL_FILE $RUN_DIR/$RUN_MDL
   
  for paramfile in $paramfiles
  do
  
    PARAM=`gawk -v lnbr="$i" 'NR==lnbr {print $1}' $paramfile`    
    sed -i 's/\['$paramfile'\]/'$PARAM'/' ./$RUN_DIR/$RUN_MDL

  done
  
  cd $RUN_DIR
  
  #Subsitute all arithmitic with numenbrical expressions
  Gillespie_finalizemdl $RUN_DIR
  mv out.temp $RUN_MDL
   
  #Generate files for simulator from model file, and run simulation.
  Gillespie_parse $RUN_MDL > Gillespie.inp
  #Gillespie -qtp $RUN_MDL > $RUN_LOG
  seed=`date +%N`
  Gillespie -s $seed $RUN_MDL > $RUN_LOG

  #ls $PROJECT_NAME'.0.C'* | Gillespie_add Ctot.dat

  #ls $PROJECT_NAME'.0.C1'*  | Gillespie_add tempC1.dat
  #ls $PROJECT_NAME'.0.C2'* $PROJECT_NAME'.0.C2'* | Gillespie_add tempC2.dat
  #ls $PROJECT_NAME'.0.C3'* $PROJECT_NAME'.0.C3'* $PROJECT_NAME'.0.C3'* | Gillespie_add tempC3.dat
  #ls $PROJECT_NAME'.0.C4'* $PROJECT_NAME'.0.C4'* $PROJECT_NAME'.0.C4'* $PROJECT_NAME'.0.C4'* | Gillespie_add tempC4.dat
  #ls $PROJECT_NAME'.0.C5'* $PROJECT_NAME'.0.C5'* $PROJECT_NAME'.0.C5'* $PROJECT_NAME'.0.C5'* $PROJECT_NAME'.0.C5'* | Gillespie_add tempC5.dat
  #ls $PROJECT_NAME'.0.C6'* $PROJECT_NAME'.0.C6'* $PROJECT_NAME'.0.C6'* $PROJECT_NAME'.0.C6'* $PROJECT_NAME'.0.C6'* $PROJECT_NAME'.0.C6'* | Gillespie_add tempC6.dat

  #ls tempC1.dat tempC2.dat tempC3.dat tempC4.dat tempC5.dat tempC6.dat | Gillespie_add Cpho.dat

  #pr -mts' ' Ctot.dat Cpho.dat > tempCcomb.dat

  #awk 'NR>10 { tmp=($4)/(6 * $2) ; printf"%0.8f\t%0.8f\n", $1, tmp}' tempCcomb.dat > tempCpho.dat
  #mv tempCpho.dat Cpho.dat

  # Remove all files for disk space.
  #rm -f tempC*
  #rm -f $PROJECT_NAME'.0.'*
  
  #Gillespie_kaiana $PROJECT_NAME
    
  cd ..
  
  #for paramfile in $paramfiles 
  #do
  #  PARAM=`gawk -v lnbr="$i" 'NR==lnbr {print $1}' $paramfile`
  #  sed -i '$ s/^/'$PARAM' /' $OUTPUT_FILE
  #done
  
  #rm -r $RUN_DIR

done
