#!/bin/bash

# Run a parameter sweep with Gillespie.

# Usage: ./Gillespie_paramscan <PROJECT_NAME>

# Model file should contain parameter equated to '[PARAM1]',...,'[PARAMi]'. 
# This file replaces every occurance of these with the parameter value 
# spedified in the files PARAM1,...,PARAMi, and runs the simulation on the
# model file.

#Get project name of model file.
#PROJECT_NAME=`echo $INPUT_FILE | sed 's/\([0-9A-Za-z_-]*\).*/\1/'`
PROJECT_NAME=$1

#Remove older files.
rm -f *.0.*
rm -f *~
rm -f PARAM*~
rm -f *.dat

rm -fr $PROJECT_NAME"_"*
rm -f avr.*
rm -f diff.*
rm -f tot.*
rm -f *.tot
rm -f NN.*
rm -f NA.*
rm -f NB.*
rm -f NAB.*

# Define files for parameter parsing.
MODEL_FILE=$PROJECT_NAME".mdl"
INPUT_FILE=$MODEL_FILE
PARAM_FILE=$PROJECT_NAME".par"
TEMPL_FILE=$PROJECT_NAME".mtp"
OUTPUT_FILE=`pwd`"/"$PROJECT_NAME".dat"

Gillespie_parasub $PARAM_FILE $TEMPL_FILE $MODEL_FILE

#Find the number of PARAM files.
PARAM_NBR=`ls -1 PARAM* | wc -l`
paramfiles=`ls PARAM*`

#Find number of iterations. Assuming all files have the same length as the first.
ITERATION_NBR=`cat PARAM1 | wc -l`

echo $ITERATION_NBR "simulations on roll with" $PARAM_NBR "parameters, writing data to:" $PROJECT_NAME".dat"

for i in `seq 1 $ITERATION_NBR`
do

  #start counting at 10, easier dir sequence.
  j=`expr $i + 10`

  RUN_DIR=$PROJECT_NAME"_"$j
  RUN_MDL=$PROJECT_NAME"_"$j".mdl"
  RUN_LOG=$PROJECT_NAME"_"$j".log"

  mkdir $RUN_DIR
  cp $INPUT_FILE $RUN_DIR/$RUN_MDL

  #cp ../gplot_KondoPNG.cfg ./$RUN_DIR
  #cp ./gplot_totST.cfg ./$RUN_DIR
  #cp ./gplot_KaiA.cfg ./$RUN_DIR
  #cp ./gplot_KaiB.cfg ./$RUN_DIR
  #cp ./gplot_KaiA2.cfg ./$RUN_DIR
     
  for paramfile in $paramfiles
  do
  
    PARAM=`gawk -v lnbr="$i" 'NR==lnbr {print $1}' $paramfile`    
    sed -i 's/\['$paramfile'\]/'$PARAM'/' ./$RUN_DIR/$RUN_MDL

  done
  
  cd $RUN_DIR
  
  #Subsitute all arithmitic with numenbrical expressions
  Gillespie_finalizemdl $RUN_DIR
  mv out.temp RUN_MDL
  
  # Retrieve arithmic expressions from mdl file and calc. the awnser. 
  #TOFIND=`grep -o -m 1 '\[.*\]' $RUN_MDL`
  #while [ -n "$TOFIND" ]; do
  #  RESULT1=`grep -o -m 1 '\[.*\]' $RUN_MDL | sed -e 's/\[\(.*\)\]/\1/'`
  #  RESULT2=`echo "$RESULT1" | bc`

    #Change to regex.
  #  TOFIND2=`printf '%q' "$TOFIND"`

    # Replace the [] exressions from model file with the result.  
  #  sed -i 's/'"$TOFIND2"'/'$RESULT2'/' $RUN_MDL
  #  TOFIND=`grep -o -m 1 '\[.*\]' $RUN_MDL`
  #done   
  
  #Generate files for simulator from model file, and run simulation.
  Gillespie_parse $RUN_MDL > Gillespie.inp
  Gillespie $RUN_MDL > $RUN_LOG
  
  ### Kondo model
  #ls kaiKondo.0.*Cp* | Gillespie_add avr.Cp
  #ls kaiKondo.0.lCp* | Gillespie_add avr.lCp
  #ls kaiKondo.0.*lATP | Gillespie_add avr.lATP
  #ls kaiKondo.0.*ADP | Gillespie_add avr.ADP
  #ls kaiKondo.0.lPi | Gillespie_add avr.lPi
  #ls kaiKondo.0.*ATP | Gillespie_add avr.ATP
  
  #Gillespie_diff avr.ADP diff.ADP
  #Gillespie_diff avr.ATP diff.ATP
  #Gillespie_diff avr.Cp diff.Cp
  #Gillespie_diff avr.lCp diff.lCp
  #Gillespie_diff avr.lATP diff.lATP
  #Gillespie_diff avr.lPi diff.lPi
  
  ### Rust model
  #data_Rust

  ### Jeroen model
  #Gillespie_ana $PROJECT_NAME
  
  ### KaiNew model
  #ls KaiANew.0.AU KaiANew.0.U | Gillespie_add U.tot
  #ls KaiANew.0.AT KaiANew.0.T | Gillespie_add T.tot
  #ls KaiANew.0.AS KaiANew.0.S | Gillespie_add S.tot
  #ls KaiANew.0.AD KaiANew.0.D | Gillespie_add D.tot
  #ls T.tot S.tot D.tot | Gillespie_add Cp.tot
  
  ### Kai2state model
  #/home/paijmans/Gillespie/Kai2Rust/data_2KaiAB.scr
  
  #Gillespie_average $INPUT_FILE $OUTPUT_FILE
  
  #gnuplot gplot_totST.cfg
  #gnuplot gplot_KaiA.cfg
  #gnuplot gplot_KaiB.cfg
  
  ### ThreeState model
  #/home/paijmans/Gillespie/ThreeStateOscillator/data_3SO.scr
  #gnuplot gplot_totST.cfg
  #gnuplot gplot_KaiA.cfg
  #gnuplot gplot_KaiB.cfg
  #gnuplot gplot_KaiA2.cfg
  
  cd ..
  
  for paramfile in $paramfiles 
  do
    PARAM=`gawk -v lnbr="$i" 'NR==lnbr {print $1}' $paramfile`
    sed -i '$ s/^/'$PARAM' /' $OUTPUT_FILE
  done
  
  #rm -r $RUN_DIR

done
